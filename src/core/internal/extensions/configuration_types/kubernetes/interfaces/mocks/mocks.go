// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/mujak27/gamen/src/core/internal/extensions/configuration_types/kubernetes/dto"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/client-go/kubernetes"
)

// NewMockIKubernetesService creates a new instance of MockIKubernetesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIKubernetesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIKubernetesService {
	mock := &MockIKubernetesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIKubernetesService is an autogenerated mock type for the IKubernetesService type
type MockIKubernetesService struct {
	mock.Mock
}

type MockIKubernetesService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIKubernetesService) EXPECT() *MockIKubernetesService_Expecter {
	return &MockIKubernetesService_Expecter{mock: &_m.Mock}
}

// CreateKubernetesClient provides a mock function for the type MockIKubernetesService
func (_mock *MockIKubernetesService) CreateKubernetesClient(config dto.KubernetesConfiguration) (*kubernetes.Clientset, error) {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateKubernetesClient")
	}

	var r0 *kubernetes.Clientset
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dto.KubernetesConfiguration) (*kubernetes.Clientset, error)); ok {
		return returnFunc(config)
	}
	if returnFunc, ok := ret.Get(0).(func(dto.KubernetesConfiguration) *kubernetes.Clientset); ok {
		r0 = returnFunc(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Clientset)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(dto.KubernetesConfiguration) error); ok {
		r1 = returnFunc(config)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIKubernetesService_CreateKubernetesClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateKubernetesClient'
type MockIKubernetesService_CreateKubernetesClient_Call struct {
	*mock.Call
}

// CreateKubernetesClient is a helper method to define mock.On call
//   - config dto.KubernetesConfiguration
func (_e *MockIKubernetesService_Expecter) CreateKubernetesClient(config interface{}) *MockIKubernetesService_CreateKubernetesClient_Call {
	return &MockIKubernetesService_CreateKubernetesClient_Call{Call: _e.mock.On("CreateKubernetesClient", config)}
}

func (_c *MockIKubernetesService_CreateKubernetesClient_Call) Run(run func(config dto.KubernetesConfiguration)) *MockIKubernetesService_CreateKubernetesClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.KubernetesConfiguration
		if args[0] != nil {
			arg0 = args[0].(dto.KubernetesConfiguration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIKubernetesService_CreateKubernetesClient_Call) Return(clientset *kubernetes.Clientset, err error) *MockIKubernetesService_CreateKubernetesClient_Call {
	_c.Call.Return(clientset, err)
	return _c
}

func (_c *MockIKubernetesService_CreateKubernetesClient_Call) RunAndReturn(run func(config dto.KubernetesConfiguration) (*kubernetes.Clientset, error)) *MockIKubernetesService_CreateKubernetesClient_Call {
	_c.Call.Return(run)
	return _c
}
