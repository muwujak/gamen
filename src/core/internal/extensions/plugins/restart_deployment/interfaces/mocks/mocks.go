// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"k8s.io/client-go/kubernetes"
)

// NewMockIUtilService creates a new instance of MockIUtilService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUtilService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUtilService {
	mock := &MockIUtilService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUtilService is an autogenerated mock type for the IUtilService type
type MockIUtilService struct {
	mock.Mock
}

type MockIUtilService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUtilService) EXPECT() *MockIUtilService_Expecter {
	return &MockIUtilService_Expecter{mock: &_m.Mock}
}

// RestartDeployment provides a mock function for the type MockIUtilService
func (_mock *MockIUtilService) RestartDeployment(clientset *kubernetes.Clientset, deploymentName string) error {
	ret := _mock.Called(clientset, deploymentName)

	if len(ret) == 0 {
		panic("no return value specified for RestartDeployment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*kubernetes.Clientset, string) error); ok {
		r0 = returnFunc(clientset, deploymentName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUtilService_RestartDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestartDeployment'
type MockIUtilService_RestartDeployment_Call struct {
	*mock.Call
}

// RestartDeployment is a helper method to define mock.On call
//   - clientset *kubernetes.Clientset
//   - deploymentName string
func (_e *MockIUtilService_Expecter) RestartDeployment(clientset interface{}, deploymentName interface{}) *MockIUtilService_RestartDeployment_Call {
	return &MockIUtilService_RestartDeployment_Call{Call: _e.mock.On("RestartDeployment", clientset, deploymentName)}
}

func (_c *MockIUtilService_RestartDeployment_Call) Run(run func(clientset *kubernetes.Clientset, deploymentName string)) *MockIUtilService_RestartDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *kubernetes.Clientset
		if args[0] != nil {
			arg0 = args[0].(*kubernetes.Clientset)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUtilService_RestartDeployment_Call) Return(err error) *MockIUtilService_RestartDeployment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUtilService_RestartDeployment_Call) RunAndReturn(run func(clientset *kubernetes.Clientset, deploymentName string) error) *MockIUtilService_RestartDeployment_Call {
	_c.Call.Return(run)
	return _c
}
