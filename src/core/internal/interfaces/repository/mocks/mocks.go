// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/mujak27/gamen/src/core/internal/interfaces/services"
	"github.com/mujak27/gamen/src/core/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCatalogueRepository creates a new instance of MockCatalogueRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCatalogueRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCatalogueRepository {
	mock := &MockCatalogueRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCatalogueRepository is an autogenerated mock type for the CatalogueRepository type
type MockCatalogueRepository struct {
	mock.Mock
}

type MockCatalogueRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCatalogueRepository) EXPECT() *MockCatalogueRepository_Expecter {
	return &MockCatalogueRepository_Expecter{mock: &_m.Mock}
}

// GetPluginFunctionById provides a mock function for the type MockCatalogueRepository
func (_mock *MockCatalogueRepository) GetPluginFunctionById(id uuid.UUID) (interfaces.PluginService, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPluginFunctionById")
	}

	var r0 interfaces.PluginService
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (interfaces.PluginService, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) interfaces.PluginService); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.PluginService)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCatalogueRepository_GetPluginFunctionById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginFunctionById'
type MockCatalogueRepository_GetPluginFunctionById_Call struct {
	*mock.Call
}

// GetPluginFunctionById is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockCatalogueRepository_Expecter) GetPluginFunctionById(id interface{}) *MockCatalogueRepository_GetPluginFunctionById_Call {
	return &MockCatalogueRepository_GetPluginFunctionById_Call{Call: _e.mock.On("GetPluginFunctionById", id)}
}

func (_c *MockCatalogueRepository_GetPluginFunctionById_Call) Run(run func(id uuid.UUID)) *MockCatalogueRepository_GetPluginFunctionById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCatalogueRepository_GetPluginFunctionById_Call) Return(pluginService interfaces.PluginService, err error) *MockCatalogueRepository_GetPluginFunctionById_Call {
	_c.Call.Return(pluginService, err)
	return _c
}

func (_c *MockCatalogueRepository_GetPluginFunctionById_Call) RunAndReturn(run func(id uuid.UUID) (interfaces.PluginService, error)) *MockCatalogueRepository_GetPluginFunctionById_Call {
	_c.Call.Return(run)
	return _c
}

// ListPluginKeys provides a mock function for the type MockCatalogueRepository
func (_mock *MockCatalogueRepository) ListPluginKeys() []uuid.UUID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListPluginKeys")
	}

	var r0 []uuid.UUID
	if returnFunc, ok := ret.Get(0).(func() []uuid.UUID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}
	return r0
}

// MockCatalogueRepository_ListPluginKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPluginKeys'
type MockCatalogueRepository_ListPluginKeys_Call struct {
	*mock.Call
}

// ListPluginKeys is a helper method to define mock.On call
func (_e *MockCatalogueRepository_Expecter) ListPluginKeys() *MockCatalogueRepository_ListPluginKeys_Call {
	return &MockCatalogueRepository_ListPluginKeys_Call{Call: _e.mock.On("ListPluginKeys")}
}

func (_c *MockCatalogueRepository_ListPluginKeys_Call) Run(run func()) *MockCatalogueRepository_ListPluginKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCatalogueRepository_ListPluginKeys_Call) Return(uUIDs []uuid.UUID) *MockCatalogueRepository_ListPluginKeys_Call {
	_c.Call.Return(uUIDs)
	return _c
}

func (_c *MockCatalogueRepository_ListPluginKeys_Call) RunAndReturn(run func() []uuid.UUID) *MockCatalogueRepository_ListPluginKeys_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterPluginFunction provides a mock function for the type MockCatalogueRepository
func (_mock *MockCatalogueRepository) RegisterPluginFunction(key uuid.UUID, plugin interfaces.PluginService) {
	_mock.Called(key, plugin)
	return
}

// MockCatalogueRepository_RegisterPluginFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPluginFunction'
type MockCatalogueRepository_RegisterPluginFunction_Call struct {
	*mock.Call
}

// RegisterPluginFunction is a helper method to define mock.On call
//   - key uuid.UUID
//   - plugin interfaces.PluginService
func (_e *MockCatalogueRepository_Expecter) RegisterPluginFunction(key interface{}, plugin interface{}) *MockCatalogueRepository_RegisterPluginFunction_Call {
	return &MockCatalogueRepository_RegisterPluginFunction_Call{Call: _e.mock.On("RegisterPluginFunction", key, plugin)}
}

func (_c *MockCatalogueRepository_RegisterPluginFunction_Call) Run(run func(key uuid.UUID, plugin interfaces.PluginService)) *MockCatalogueRepository_RegisterPluginFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 interfaces.PluginService
		if args[1] != nil {
			arg1 = args[1].(interfaces.PluginService)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCatalogueRepository_RegisterPluginFunction_Call) Return() *MockCatalogueRepository_RegisterPluginFunction_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCatalogueRepository_RegisterPluginFunction_Call) RunAndReturn(run func(key uuid.UUID, plugin interfaces.PluginService)) *MockCatalogueRepository_RegisterPluginFunction_Call {
	_c.Run(run)
	return _c
}

// NewMockConfigurationRepository creates a new instance of MockConfigurationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigurationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigurationRepository {
	mock := &MockConfigurationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigurationRepository is an autogenerated mock type for the ConfigurationRepository type
type MockConfigurationRepository struct {
	mock.Mock
}

type MockConfigurationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigurationRepository) EXPECT() *MockConfigurationRepository_Expecter {
	return &MockConfigurationRepository_Expecter{mock: &_m.Mock}
}

// CreateConfiguration provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) CreateConfiguration(configuration models.Configuration) (models.Configuration, error) {
	ret := _mock.Called(configuration)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfiguration")
	}

	var r0 models.Configuration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(models.Configuration) (models.Configuration, error)); ok {
		return returnFunc(configuration)
	}
	if returnFunc, ok := ret.Get(0).(func(models.Configuration) models.Configuration); ok {
		r0 = returnFunc(configuration)
	} else {
		r0 = ret.Get(0).(models.Configuration)
	}
	if returnFunc, ok := ret.Get(1).(func(models.Configuration) error); ok {
		r1 = returnFunc(configuration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_CreateConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConfiguration'
type MockConfigurationRepository_CreateConfiguration_Call struct {
	*mock.Call
}

// CreateConfiguration is a helper method to define mock.On call
//   - configuration models.Configuration
func (_e *MockConfigurationRepository_Expecter) CreateConfiguration(configuration interface{}) *MockConfigurationRepository_CreateConfiguration_Call {
	return &MockConfigurationRepository_CreateConfiguration_Call{Call: _e.mock.On("CreateConfiguration", configuration)}
}

func (_c *MockConfigurationRepository_CreateConfiguration_Call) Run(run func(configuration models.Configuration)) *MockConfigurationRepository_CreateConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Configuration
		if args[0] != nil {
			arg0 = args[0].(models.Configuration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigurationRepository_CreateConfiguration_Call) Return(configuration1 models.Configuration, err error) *MockConfigurationRepository_CreateConfiguration_Call {
	_c.Call.Return(configuration1, err)
	return _c
}

func (_c *MockConfigurationRepository_CreateConfiguration_Call) RunAndReturn(run func(configuration models.Configuration) (models.Configuration, error)) *MockConfigurationRepository_CreateConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConfiguration provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) DeleteConfiguration(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfiguration")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigurationRepository_DeleteConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConfiguration'
type MockConfigurationRepository_DeleteConfiguration_Call struct {
	*mock.Call
}

// DeleteConfiguration is a helper method to define mock.On call
//   - name string
func (_e *MockConfigurationRepository_Expecter) DeleteConfiguration(name interface{}) *MockConfigurationRepository_DeleteConfiguration_Call {
	return &MockConfigurationRepository_DeleteConfiguration_Call{Call: _e.mock.On("DeleteConfiguration", name)}
}

func (_c *MockConfigurationRepository_DeleteConfiguration_Call) Run(run func(name string)) *MockConfigurationRepository_DeleteConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigurationRepository_DeleteConfiguration_Call) Return(err error) *MockConfigurationRepository_DeleteConfiguration_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigurationRepository_DeleteConfiguration_Call) RunAndReturn(run func(name string) error) *MockConfigurationRepository_DeleteConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigurationById provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) GetConfigurationById(id string) (models.Configuration, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationById")
	}

	var r0 models.Configuration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.Configuration, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.Configuration); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Configuration)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_GetConfigurationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigurationById'
type MockConfigurationRepository_GetConfigurationById_Call struct {
	*mock.Call
}

// GetConfigurationById is a helper method to define mock.On call
//   - id string
func (_e *MockConfigurationRepository_Expecter) GetConfigurationById(id interface{}) *MockConfigurationRepository_GetConfigurationById_Call {
	return &MockConfigurationRepository_GetConfigurationById_Call{Call: _e.mock.On("GetConfigurationById", id)}
}

func (_c *MockConfigurationRepository_GetConfigurationById_Call) Run(run func(id string)) *MockConfigurationRepository_GetConfigurationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigurationRepository_GetConfigurationById_Call) Return(configuration models.Configuration, err error) *MockConfigurationRepository_GetConfigurationById_Call {
	_c.Call.Return(configuration, err)
	return _c
}

func (_c *MockConfigurationRepository_GetConfigurationById_Call) RunAndReturn(run func(id string) (models.Configuration, error)) *MockConfigurationRepository_GetConfigurationById_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigurationTypeById provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) GetConfigurationTypeById(id string) (models.ConfigurationType, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationTypeById")
	}

	var r0 models.ConfigurationType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.ConfigurationType, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.ConfigurationType); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.ConfigurationType)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_GetConfigurationTypeById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigurationTypeById'
type MockConfigurationRepository_GetConfigurationTypeById_Call struct {
	*mock.Call
}

// GetConfigurationTypeById is a helper method to define mock.On call
//   - id string
func (_e *MockConfigurationRepository_Expecter) GetConfigurationTypeById(id interface{}) *MockConfigurationRepository_GetConfigurationTypeById_Call {
	return &MockConfigurationRepository_GetConfigurationTypeById_Call{Call: _e.mock.On("GetConfigurationTypeById", id)}
}

func (_c *MockConfigurationRepository_GetConfigurationTypeById_Call) Run(run func(id string)) *MockConfigurationRepository_GetConfigurationTypeById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigurationRepository_GetConfigurationTypeById_Call) Return(configurationType models.ConfigurationType, err error) *MockConfigurationRepository_GetConfigurationTypeById_Call {
	_c.Call.Return(configurationType, err)
	return _c
}

func (_c *MockConfigurationRepository_GetConfigurationTypeById_Call) RunAndReturn(run func(id string) (models.ConfigurationType, error)) *MockConfigurationRepository_GetConfigurationTypeById_Call {
	_c.Call.Return(run)
	return _c
}

// ListConfigurationTypes provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) ListConfigurationTypes() ([]models.ConfigurationType, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationTypes")
	}

	var r0 []models.ConfigurationType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.ConfigurationType, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.ConfigurationType); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ConfigurationType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_ListConfigurationTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConfigurationTypes'
type MockConfigurationRepository_ListConfigurationTypes_Call struct {
	*mock.Call
}

// ListConfigurationTypes is a helper method to define mock.On call
func (_e *MockConfigurationRepository_Expecter) ListConfigurationTypes() *MockConfigurationRepository_ListConfigurationTypes_Call {
	return &MockConfigurationRepository_ListConfigurationTypes_Call{Call: _e.mock.On("ListConfigurationTypes")}
}

func (_c *MockConfigurationRepository_ListConfigurationTypes_Call) Run(run func()) *MockConfigurationRepository_ListConfigurationTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurationRepository_ListConfigurationTypes_Call) Return(configurationTypes []models.ConfigurationType, err error) *MockConfigurationRepository_ListConfigurationTypes_Call {
	_c.Call.Return(configurationTypes, err)
	return _c
}

func (_c *MockConfigurationRepository_ListConfigurationTypes_Call) RunAndReturn(run func() ([]models.ConfigurationType, error)) *MockConfigurationRepository_ListConfigurationTypes_Call {
	_c.Call.Return(run)
	return _c
}

// ListConfigurations provides a mock function for the type MockConfigurationRepository
func (_mock *MockConfigurationRepository) ListConfigurations() ([]models.Configuration, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurations")
	}

	var r0 []models.Configuration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.Configuration, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.Configuration); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Configuration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationRepository_ListConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConfigurations'
type MockConfigurationRepository_ListConfigurations_Call struct {
	*mock.Call
}

// ListConfigurations is a helper method to define mock.On call
func (_e *MockConfigurationRepository_Expecter) ListConfigurations() *MockConfigurationRepository_ListConfigurations_Call {
	return &MockConfigurationRepository_ListConfigurations_Call{Call: _e.mock.On("ListConfigurations")}
}

func (_c *MockConfigurationRepository_ListConfigurations_Call) Run(run func()) *MockConfigurationRepository_ListConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurationRepository_ListConfigurations_Call) Return(configurations []models.Configuration, err error) *MockConfigurationRepository_ListConfigurations_Call {
	_c.Call.Return(configurations, err)
	return _c
}

func (_c *MockConfigurationRepository_ListConfigurations_Call) RunAndReturn(run func() ([]models.Configuration, error)) *MockConfigurationRepository_ListConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDashboardRepository creates a new instance of MockDashboardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDashboardRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDashboardRepository {
	mock := &MockDashboardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDashboardRepository is an autogenerated mock type for the DashboardRepository type
type MockDashboardRepository struct {
	mock.Mock
}

type MockDashboardRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDashboardRepository) EXPECT() *MockDashboardRepository_Expecter {
	return &MockDashboardRepository_Expecter{mock: &_m.Mock}
}

// GetCurrentUserDashboard provides a mock function for the type MockDashboardRepository
func (_mock *MockDashboardRepository) GetCurrentUserDashboard() (models.Dashboard, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUserDashboard")
	}

	var r0 models.Dashboard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (models.Dashboard, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() models.Dashboard); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(models.Dashboard)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDashboardRepository_GetCurrentUserDashboard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUserDashboard'
type MockDashboardRepository_GetCurrentUserDashboard_Call struct {
	*mock.Call
}

// GetCurrentUserDashboard is a helper method to define mock.On call
func (_e *MockDashboardRepository_Expecter) GetCurrentUserDashboard() *MockDashboardRepository_GetCurrentUserDashboard_Call {
	return &MockDashboardRepository_GetCurrentUserDashboard_Call{Call: _e.mock.On("GetCurrentUserDashboard")}
}

func (_c *MockDashboardRepository_GetCurrentUserDashboard_Call) Run(run func()) *MockDashboardRepository_GetCurrentUserDashboard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDashboardRepository_GetCurrentUserDashboard_Call) Return(dashboard models.Dashboard, err error) *MockDashboardRepository_GetCurrentUserDashboard_Call {
	_c.Call.Return(dashboard, err)
	return _c
}

func (_c *MockDashboardRepository_GetCurrentUserDashboard_Call) RunAndReturn(run func() (models.Dashboard, error)) *MockDashboardRepository_GetCurrentUserDashboard_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWidgetRepository creates a new instance of MockWidgetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWidgetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWidgetRepository {
	mock := &MockWidgetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWidgetRepository is an autogenerated mock type for the WidgetRepository type
type MockWidgetRepository struct {
	mock.Mock
}

type MockWidgetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWidgetRepository) EXPECT() *MockWidgetRepository_Expecter {
	return &MockWidgetRepository_Expecter{mock: &_m.Mock}
}

// GetWidgetById provides a mock function for the type MockWidgetRepository
func (_mock *MockWidgetRepository) GetWidgetById(id uuid.UUID) (models.Widget, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetWidgetById")
	}

	var r0 models.Widget
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.Widget, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.Widget); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Widget)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWidgetRepository_GetWidgetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWidgetById'
type MockWidgetRepository_GetWidgetById_Call struct {
	*mock.Call
}

// GetWidgetById is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockWidgetRepository_Expecter) GetWidgetById(id interface{}) *MockWidgetRepository_GetWidgetById_Call {
	return &MockWidgetRepository_GetWidgetById_Call{Call: _e.mock.On("GetWidgetById", id)}
}

func (_c *MockWidgetRepository_GetWidgetById_Call) Run(run func(id uuid.UUID)) *MockWidgetRepository_GetWidgetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWidgetRepository_GetWidgetById_Call) Return(widget models.Widget, err error) *MockWidgetRepository_GetWidgetById_Call {
	_c.Call.Return(widget, err)
	return _c
}

func (_c *MockWidgetRepository_GetWidgetById_Call) RunAndReturn(run func(id uuid.UUID) (models.Widget, error)) *MockWidgetRepository_GetWidgetById_Call {
	_c.Call.Return(run)
	return _c
}
