// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/google/uuid"
	"github.com/mujak27/gamen/src/core/internal/api/dto"
	"github.com/mujak27/gamen/src/core/internal/interfaces/services"
	"github.com/mujak27/gamen/src/core/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCatalogueService creates a new instance of MockCatalogueService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCatalogueService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCatalogueService {
	mock := &MockCatalogueService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCatalogueService is an autogenerated mock type for the CatalogueService type
type MockCatalogueService struct {
	mock.Mock
}

type MockCatalogueService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCatalogueService) EXPECT() *MockCatalogueService_Expecter {
	return &MockCatalogueService_Expecter{mock: &_m.Mock}
}

// GetPluginFunctionById provides a mock function for the type MockCatalogueService
func (_mock *MockCatalogueService) GetPluginFunctionById(id uuid.UUID) (interfaces.PluginService, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPluginFunctionById")
	}

	var r0 interfaces.PluginService
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (interfaces.PluginService, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) interfaces.PluginService); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.PluginService)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCatalogueService_GetPluginFunctionById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginFunctionById'
type MockCatalogueService_GetPluginFunctionById_Call struct {
	*mock.Call
}

// GetPluginFunctionById is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockCatalogueService_Expecter) GetPluginFunctionById(id interface{}) *MockCatalogueService_GetPluginFunctionById_Call {
	return &MockCatalogueService_GetPluginFunctionById_Call{Call: _e.mock.On("GetPluginFunctionById", id)}
}

func (_c *MockCatalogueService_GetPluginFunctionById_Call) Run(run func(id uuid.UUID)) *MockCatalogueService_GetPluginFunctionById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCatalogueService_GetPluginFunctionById_Call) Return(pluginService interfaces.PluginService, err error) *MockCatalogueService_GetPluginFunctionById_Call {
	_c.Call.Return(pluginService, err)
	return _c
}

func (_c *MockCatalogueService_GetPluginFunctionById_Call) RunAndReturn(run func(id uuid.UUID) (interfaces.PluginService, error)) *MockCatalogueService_GetPluginFunctionById_Call {
	_c.Call.Return(run)
	return _c
}

// GetPluginModelById provides a mock function for the type MockCatalogueService
func (_mock *MockCatalogueService) GetPluginModelById(id uuid.UUID) (models.Plugin, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPluginModelById")
	}

	var r0 models.Plugin
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (models.Plugin, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) models.Plugin); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Plugin)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCatalogueService_GetPluginModelById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginModelById'
type MockCatalogueService_GetPluginModelById_Call struct {
	*mock.Call
}

// GetPluginModelById is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockCatalogueService_Expecter) GetPluginModelById(id interface{}) *MockCatalogueService_GetPluginModelById_Call {
	return &MockCatalogueService_GetPluginModelById_Call{Call: _e.mock.On("GetPluginModelById", id)}
}

func (_c *MockCatalogueService_GetPluginModelById_Call) Run(run func(id uuid.UUID)) *MockCatalogueService_GetPluginModelById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCatalogueService_GetPluginModelById_Call) Return(plugin models.Plugin, err error) *MockCatalogueService_GetPluginModelById_Call {
	_c.Call.Return(plugin, err)
	return _c
}

func (_c *MockCatalogueService_GetPluginModelById_Call) RunAndReturn(run func(id uuid.UUID) (models.Plugin, error)) *MockCatalogueService_GetPluginModelById_Call {
	_c.Call.Return(run)
	return _c
}

// ListPluginKeys provides a mock function for the type MockCatalogueService
func (_mock *MockCatalogueService) ListPluginKeys() ([]uuid.UUID, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListPluginKeys")
	}

	var r0 []uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]uuid.UUID, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []uuid.UUID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCatalogueService_ListPluginKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPluginKeys'
type MockCatalogueService_ListPluginKeys_Call struct {
	*mock.Call
}

// ListPluginKeys is a helper method to define mock.On call
func (_e *MockCatalogueService_Expecter) ListPluginKeys() *MockCatalogueService_ListPluginKeys_Call {
	return &MockCatalogueService_ListPluginKeys_Call{Call: _e.mock.On("ListPluginKeys")}
}

func (_c *MockCatalogueService_ListPluginKeys_Call) Run(run func()) *MockCatalogueService_ListPluginKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCatalogueService_ListPluginKeys_Call) Return(uUIDs []uuid.UUID, err error) *MockCatalogueService_ListPluginKeys_Call {
	_c.Call.Return(uUIDs, err)
	return _c
}

func (_c *MockCatalogueService_ListPluginKeys_Call) RunAndReturn(run func() ([]uuid.UUID, error)) *MockCatalogueService_ListPluginKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigurationService creates a new instance of MockConfigurationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigurationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigurationService {
	mock := &MockConfigurationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigurationService is an autogenerated mock type for the ConfigurationService type
type MockConfigurationService struct {
	mock.Mock
}

type MockConfigurationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigurationService) EXPECT() *MockConfigurationService_Expecter {
	return &MockConfigurationService_Expecter{mock: &_m.Mock}
}

// CreateConfiguration provides a mock function for the type MockConfigurationService
func (_mock *MockConfigurationService) CreateConfiguration(configuration models.Configuration) (models.Configuration, error) {
	ret := _mock.Called(configuration)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfiguration")
	}

	var r0 models.Configuration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(models.Configuration) (models.Configuration, error)); ok {
		return returnFunc(configuration)
	}
	if returnFunc, ok := ret.Get(0).(func(models.Configuration) models.Configuration); ok {
		r0 = returnFunc(configuration)
	} else {
		r0 = ret.Get(0).(models.Configuration)
	}
	if returnFunc, ok := ret.Get(1).(func(models.Configuration) error); ok {
		r1 = returnFunc(configuration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationService_CreateConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateConfiguration'
type MockConfigurationService_CreateConfiguration_Call struct {
	*mock.Call
}

// CreateConfiguration is a helper method to define mock.On call
//   - configuration models.Configuration
func (_e *MockConfigurationService_Expecter) CreateConfiguration(configuration interface{}) *MockConfigurationService_CreateConfiguration_Call {
	return &MockConfigurationService_CreateConfiguration_Call{Call: _e.mock.On("CreateConfiguration", configuration)}
}

func (_c *MockConfigurationService_CreateConfiguration_Call) Run(run func(configuration models.Configuration)) *MockConfigurationService_CreateConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Configuration
		if args[0] != nil {
			arg0 = args[0].(models.Configuration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigurationService_CreateConfiguration_Call) Return(configuration1 models.Configuration, err error) *MockConfigurationService_CreateConfiguration_Call {
	_c.Call.Return(configuration1, err)
	return _c
}

func (_c *MockConfigurationService_CreateConfiguration_Call) RunAndReturn(run func(configuration models.Configuration) (models.Configuration, error)) *MockConfigurationService_CreateConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteConfiguration provides a mock function for the type MockConfigurationService
func (_mock *MockConfigurationService) DeleteConfiguration(name string) error {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfiguration")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigurationService_DeleteConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConfiguration'
type MockConfigurationService_DeleteConfiguration_Call struct {
	*mock.Call
}

// DeleteConfiguration is a helper method to define mock.On call
//   - name string
func (_e *MockConfigurationService_Expecter) DeleteConfiguration(name interface{}) *MockConfigurationService_DeleteConfiguration_Call {
	return &MockConfigurationService_DeleteConfiguration_Call{Call: _e.mock.On("DeleteConfiguration", name)}
}

func (_c *MockConfigurationService_DeleteConfiguration_Call) Run(run func(name string)) *MockConfigurationService_DeleteConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigurationService_DeleteConfiguration_Call) Return(err error) *MockConfigurationService_DeleteConfiguration_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigurationService_DeleteConfiguration_Call) RunAndReturn(run func(name string) error) *MockConfigurationService_DeleteConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigurationById provides a mock function for the type MockConfigurationService
func (_mock *MockConfigurationService) GetConfigurationById(id string) (models.Configuration, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationById")
	}

	var r0 models.Configuration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.Configuration, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.Configuration); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.Configuration)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationService_GetConfigurationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigurationById'
type MockConfigurationService_GetConfigurationById_Call struct {
	*mock.Call
}

// GetConfigurationById is a helper method to define mock.On call
//   - id string
func (_e *MockConfigurationService_Expecter) GetConfigurationById(id interface{}) *MockConfigurationService_GetConfigurationById_Call {
	return &MockConfigurationService_GetConfigurationById_Call{Call: _e.mock.On("GetConfigurationById", id)}
}

func (_c *MockConfigurationService_GetConfigurationById_Call) Run(run func(id string)) *MockConfigurationService_GetConfigurationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigurationService_GetConfigurationById_Call) Return(configuration models.Configuration, err error) *MockConfigurationService_GetConfigurationById_Call {
	_c.Call.Return(configuration, err)
	return _c
}

func (_c *MockConfigurationService_GetConfigurationById_Call) RunAndReturn(run func(id string) (models.Configuration, error)) *MockConfigurationService_GetConfigurationById_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigurationTypeById provides a mock function for the type MockConfigurationService
func (_mock *MockConfigurationService) GetConfigurationTypeById(id string) (models.ConfigurationType, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationTypeById")
	}

	var r0 models.ConfigurationType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.ConfigurationType, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.ConfigurationType); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(models.ConfigurationType)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationService_GetConfigurationTypeById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigurationTypeById'
type MockConfigurationService_GetConfigurationTypeById_Call struct {
	*mock.Call
}

// GetConfigurationTypeById is a helper method to define mock.On call
//   - id string
func (_e *MockConfigurationService_Expecter) GetConfigurationTypeById(id interface{}) *MockConfigurationService_GetConfigurationTypeById_Call {
	return &MockConfigurationService_GetConfigurationTypeById_Call{Call: _e.mock.On("GetConfigurationTypeById", id)}
}

func (_c *MockConfigurationService_GetConfigurationTypeById_Call) Run(run func(id string)) *MockConfigurationService_GetConfigurationTypeById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigurationService_GetConfigurationTypeById_Call) Return(configurationType models.ConfigurationType, err error) *MockConfigurationService_GetConfigurationTypeById_Call {
	_c.Call.Return(configurationType, err)
	return _c
}

func (_c *MockConfigurationService_GetConfigurationTypeById_Call) RunAndReturn(run func(id string) (models.ConfigurationType, error)) *MockConfigurationService_GetConfigurationTypeById_Call {
	_c.Call.Return(run)
	return _c
}

// ListConfigurationTypes provides a mock function for the type MockConfigurationService
func (_mock *MockConfigurationService) ListConfigurationTypes() ([]models.ConfigurationType, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationTypes")
	}

	var r0 []models.ConfigurationType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.ConfigurationType, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.ConfigurationType); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ConfigurationType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationService_ListConfigurationTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConfigurationTypes'
type MockConfigurationService_ListConfigurationTypes_Call struct {
	*mock.Call
}

// ListConfigurationTypes is a helper method to define mock.On call
func (_e *MockConfigurationService_Expecter) ListConfigurationTypes() *MockConfigurationService_ListConfigurationTypes_Call {
	return &MockConfigurationService_ListConfigurationTypes_Call{Call: _e.mock.On("ListConfigurationTypes")}
}

func (_c *MockConfigurationService_ListConfigurationTypes_Call) Run(run func()) *MockConfigurationService_ListConfigurationTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurationService_ListConfigurationTypes_Call) Return(configurationTypes []models.ConfigurationType, err error) *MockConfigurationService_ListConfigurationTypes_Call {
	_c.Call.Return(configurationTypes, err)
	return _c
}

func (_c *MockConfigurationService_ListConfigurationTypes_Call) RunAndReturn(run func() ([]models.ConfigurationType, error)) *MockConfigurationService_ListConfigurationTypes_Call {
	_c.Call.Return(run)
	return _c
}

// ListConfigurations provides a mock function for the type MockConfigurationService
func (_mock *MockConfigurationService) ListConfigurations() ([]models.Configuration, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurations")
	}

	var r0 []models.Configuration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.Configuration, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.Configuration); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Configuration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationService_ListConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConfigurations'
type MockConfigurationService_ListConfigurations_Call struct {
	*mock.Call
}

// ListConfigurations is a helper method to define mock.On call
func (_e *MockConfigurationService_Expecter) ListConfigurations() *MockConfigurationService_ListConfigurations_Call {
	return &MockConfigurationService_ListConfigurations_Call{Call: _e.mock.On("ListConfigurations")}
}

func (_c *MockConfigurationService_ListConfigurations_Call) Run(run func()) *MockConfigurationService_ListConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurationService_ListConfigurations_Call) Return(configurations []models.Configuration, err error) *MockConfigurationService_ListConfigurations_Call {
	_c.Call.Return(configurations, err)
	return _c
}

func (_c *MockConfigurationService_ListConfigurations_Call) RunAndReturn(run func() ([]models.Configuration, error)) *MockConfigurationService_ListConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPluginService creates a new instance of MockPluginService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPluginService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPluginService {
	mock := &MockPluginService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPluginService is an autogenerated mock type for the PluginService type
type MockPluginService struct {
	mock.Mock
}

type MockPluginService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPluginService) EXPECT() *MockPluginService_Expecter {
	return &MockPluginService_Expecter{mock: &_m.Mock}
}

// Action provides a mock function for the type MockPluginService
func (_mock *MockPluginService) Action(pluginActionSchema dto.PluginActionSchema) error {
	ret := _mock.Called(pluginActionSchema)

	if len(ret) == 0 {
		panic("no return value specified for Action")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dto.PluginActionSchema) error); ok {
		r0 = returnFunc(pluginActionSchema)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginService_Action_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Action'
type MockPluginService_Action_Call struct {
	*mock.Call
}

// Action is a helper method to define mock.On call
//   - pluginActionSchema dto.PluginActionSchema
func (_e *MockPluginService_Expecter) Action(pluginActionSchema interface{}) *MockPluginService_Action_Call {
	return &MockPluginService_Action_Call{Call: _e.mock.On("Action", pluginActionSchema)}
}

func (_c *MockPluginService_Action_Call) Run(run func(pluginActionSchema dto.PluginActionSchema)) *MockPluginService_Action_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.PluginActionSchema
		if args[0] != nil {
			arg0 = args[0].(dto.PluginActionSchema)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPluginService_Action_Call) Return(err error) *MockPluginService_Action_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginService_Action_Call) RunAndReturn(run func(pluginActionSchema dto.PluginActionSchema) error) *MockPluginService_Action_Call {
	_c.Call.Return(run)
	return _c
}

// ActionValidatePayload provides a mock function for the type MockPluginService
func (_mock *MockPluginService) ActionValidatePayload(pluginActionSchema dto.PluginActionSchema) error {
	ret := _mock.Called(pluginActionSchema)

	if len(ret) == 0 {
		panic("no return value specified for ActionValidatePayload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dto.PluginActionSchema) error); ok {
		r0 = returnFunc(pluginActionSchema)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPluginService_ActionValidatePayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActionValidatePayload'
type MockPluginService_ActionValidatePayload_Call struct {
	*mock.Call
}

// ActionValidatePayload is a helper method to define mock.On call
//   - pluginActionSchema dto.PluginActionSchema
func (_e *MockPluginService_Expecter) ActionValidatePayload(pluginActionSchema interface{}) *MockPluginService_ActionValidatePayload_Call {
	return &MockPluginService_ActionValidatePayload_Call{Call: _e.mock.On("ActionValidatePayload", pluginActionSchema)}
}

func (_c *MockPluginService_ActionValidatePayload_Call) Run(run func(pluginActionSchema dto.PluginActionSchema)) *MockPluginService_ActionValidatePayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.PluginActionSchema
		if args[0] != nil {
			arg0 = args[0].(dto.PluginActionSchema)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPluginService_ActionValidatePayload_Call) Return(err error) *MockPluginService_ActionValidatePayload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPluginService_ActionValidatePayload_Call) RunAndReturn(run func(pluginActionSchema dto.PluginActionSchema) error) *MockPluginService_ActionValidatePayload_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function for the type MockPluginService
func (_mock *MockPluginService) Fetch(s string) (dto.PluginFetchSchema, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 dto.PluginFetchSchema
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (dto.PluginFetchSchema, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) dto.PluginFetchSchema); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Get(0).(dto.PluginFetchSchema)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginService_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockPluginService_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - s string
func (_e *MockPluginService_Expecter) Fetch(s interface{}) *MockPluginService_Fetch_Call {
	return &MockPluginService_Fetch_Call{Call: _e.mock.On("Fetch", s)}
}

func (_c *MockPluginService_Fetch_Call) Run(run func(s string)) *MockPluginService_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPluginService_Fetch_Call) Return(pluginFetchSchema dto.PluginFetchSchema, err error) *MockPluginService_Fetch_Call {
	_c.Call.Return(pluginFetchSchema, err)
	return _c
}

func (_c *MockPluginService_Fetch_Call) RunAndReturn(run func(s string) (dto.PluginFetchSchema, error)) *MockPluginService_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockPluginService
func (_mock *MockPluginService) Get() (models.Plugin, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Plugin
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (models.Plugin, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() models.Plugin); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(models.Plugin)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPluginService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPluginService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockPluginService_Expecter) Get() *MockPluginService_Get_Call {
	return &MockPluginService_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockPluginService_Get_Call) Run(run func()) *MockPluginService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginService_Get_Call) Return(plugin models.Plugin, err error) *MockPluginService_Get_Call {
	_c.Call.Return(plugin, err)
	return _c
}

func (_c *MockPluginService_Get_Call) RunAndReturn(run func() (models.Plugin, error)) *MockPluginService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function for the type MockPluginService
func (_mock *MockPluginService) GetId() uuid.UUID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 uuid.UUID
	if returnFunc, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	return r0
}

// MockPluginService_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type MockPluginService_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *MockPluginService_Expecter) GetId() *MockPluginService_GetId_Call {
	return &MockPluginService_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *MockPluginService_GetId_Call) Run(run func()) *MockPluginService_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPluginService_GetId_Call) Return(uUID uuid.UUID) *MockPluginService_GetId_Call {
	_c.Call.Return(uUID)
	return _c
}

func (_c *MockPluginService_GetId_Call) RunAndReturn(run func() uuid.UUID) *MockPluginService_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWidgetService creates a new instance of MockWidgetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWidgetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWidgetService {
	mock := &MockWidgetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWidgetService is an autogenerated mock type for the WidgetService type
type MockWidgetService struct {
	mock.Mock
}

type MockWidgetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWidgetService) EXPECT() *MockWidgetService_Expecter {
	return &MockWidgetService_Expecter{mock: &_m.Mock}
}

// Action provides a mock function for the type MockWidgetService
func (_mock *MockWidgetService) Action(widgetActionPayload dto.WidgetActionPayload) error {
	ret := _mock.Called(widgetActionPayload)

	if len(ret) == 0 {
		panic("no return value specified for Action")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(dto.WidgetActionPayload) error); ok {
		r0 = returnFunc(widgetActionPayload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWidgetService_Action_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Action'
type MockWidgetService_Action_Call struct {
	*mock.Call
}

// Action is a helper method to define mock.On call
//   - widgetActionPayload dto.WidgetActionPayload
func (_e *MockWidgetService_Expecter) Action(widgetActionPayload interface{}) *MockWidgetService_Action_Call {
	return &MockWidgetService_Action_Call{Call: _e.mock.On("Action", widgetActionPayload)}
}

func (_c *MockWidgetService_Action_Call) Run(run func(widgetActionPayload dto.WidgetActionPayload)) *MockWidgetService_Action_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.WidgetActionPayload
		if args[0] != nil {
			arg0 = args[0].(dto.WidgetActionPayload)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWidgetService_Action_Call) Return(err error) *MockWidgetService_Action_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWidgetService_Action_Call) RunAndReturn(run func(widgetActionPayload dto.WidgetActionPayload) error) *MockWidgetService_Action_Call {
	_c.Call.Return(run)
	return _c
}
